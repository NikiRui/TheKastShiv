Kast Reduction Tools

1) Requirements
--------------------------------------------------------------------------------

   A) IRAF (Image Reduction and Analysis Facility) - Available at http://iraf.noao.edu/
   B) pyfits - Basic fits utilities for python.  Available at http://www.stsci.edu/resources/software_hardware/pyfits
   C) PyRAF - A command language to enabling users to run IRAF tasks within python.  Available at http://www.stsci.edu/resources/software_hardware/pyraf

   Note all three of these packages (and many more) are included by default in the Scisoft astronomical software suite.  Available here for PC http://www.eso.org/sci/data-processing/software/scisoft/ and here for Mac OSX http://web.mac.com/npirzkal/Scisoft/Scisoft.html

2) Downloads
--------------------------------------------------------------------------------

   I stuck a tarball with everything I think you will need to run these packages at: http://astro.berkeley.edu/~cenko/public/software/kast/kast_redux.tar.bz2.  It contains the following files:

   kast_redux.py - The python routines to perform the reduction
   iqutils.py - Additional python routines to manipulate fits files
   licklinelist.dat - An atlas of arc lines from the Kast lamps
   idArc-Blue - Blue wavelength solution from last run
   idArc-Red - Red wavelength solution from last run
   lacos_spec.cl - An IRAF script for the Laplacian removal of cosmic rays
   *.dat - Flux calibration files for a number of well-known standard stars
   

3) Setup
--------------------------------------------------------------------------------

   First of all, python needs to be aware of the kast_redux.py and iqutils.py scripts.  This can be achieved one of two ways: 1) The files reside in the directory from which you are running the reduction, or 2) You have defined the environment variable $PYTHONPATH to point to directories in which these scripts reside.  The second is option is probably easier, and can be done via your .cshrc / .login / .environments file.  To test you can use all the appropriate packages, try the following:

[bubba:~] cenko% pyraf -n
--> import iqutils
--> import kast_redux
specred/:
 aidpars@       apscatter       dopcor          sapertures      slist
 apall          apsum           doslit          sarith          specplot
 apdefault@     aptrace         fitprofs        scombine        specshift
 apedit         autoidentify    identify        scopy           splot
 apfind         background      illumination    sensfunc        standard
 apfit          bplot           lscombine       setairmass      telluric
 apflatten      calibrate       msresp1d        setjd           transform
 apmask         continuum       odcombine       sfit
 apnormalize    deredden        refspectra      sflip
 aprecenter     dispcor         reidentify      skysub
 apresize       dofibers        response        skytweak

If both of these commands return without error, your python configuration should be all set.

   Second, you have to tell IRAF where to find the lacos_spec.cl script.  When installing IRAF, you should have created a 'login.cl' file.  Add the following line to this file:

task lacos_spec="<path>/lacos_spec.cl"

where <path> is the path to the file.

4) Processing images
--------------------------------------------------------------------------------

   First, set up a directory structure.  Suppose we want to reduce all the images in the following root directory:

[bubba:obs/lick/20100315] cenko% pwd
/scr/obs/lick/20100315

Create a sub-directory called "raw" where all the raw images from the mountain will go.  I have a bunch of files there from my last KAST run:

[bubba:obs/lick/20100315] cenko% ls
raw
[bubba:obs/lick/20100315] cenko% ls raw
b1.fits         b35.fits        r15.fits        r41.fits        r66.fits
b10.fits        b36.fits        r16.fits        r42.fits        r67.fits
b11.fits        b37.fits        r17.fits        r43.fits        r68.fits
b12.fits        b38.fits        r18.fits        r44.fits        r69.fits
b13.fits        b4.fits         r19.fits        r45.fits        r7.fits
b14.fits        b40.fits        r2.fits         r46.fits        r70.fits
b15.fits        b41.fits        r20.fits        r47.fits        r71.fits
b16.fits        b42.fits        r21.fits        r48.fits        r73.fits
b17.fits        b43.fits        r22.fits        r49.fits        r74.fits
b18.fits        b44.fits        r23.fits        r5.fits         r75.fits
b19.fits        b45.fits        r24.fits        r50.fits        r76.fits
b2.fits         b46.fits        r25.fits        r51.fits        r77.fits
b20.fits        b47.fits        r26.fits        r52.fits        r78.fits
b21.fits        b48.fits        r27.fits        r53.fits        r79.fits
b22.fits        b49.fits        r28.fits        r54.fits        r8.fits
b23.fits        b5.fits         r29.fits        r55.fits        r80.fits
b24.fits        b50.fits        r30.fits        r56.fits        r81.fits
b25.fits        b6.fits         r31.fits        r57.fits        r82.fits
b26.fits        b7.fits         r32.fits        r58.fits        r83.fits
b27.fits        b8.fits         r33.fits        r59.fits        r84.fits
b28.fits        b9.fits         r35.fits        r6.fits         r85.fits
b29.fits        r1.fits         r36.fits        r60.fits        r86.fits
b3.fits         r10.fits        r37.fits        r61.fits        r87.fits
b30.fits        r11.fits        r38.fits        r62.fits        r88.fits
b31.fits        r12.fits        r39.fits        r63.fits        r89.fits
b32.fits        r13.fits        r4.fits         r64.fits        r9.fits
b34.fits        r14.fits        r40.fits        r65.fits        r90.fits

Fire up pyraf to get things started, and import the reduction tools.

[bubba:obs/lick/20100315] cenko% pyraf -n
--> import kast_redux

Once you have blue arcs, flats, and a blue flux standard in hand, copy the raw files to some directory for processing.

--> mkdir bluecalibs
--> cd bluecalibs
--> ls
b1.fits         b2.fits         b4.fits         b7.fits
b10.fits        b3.fits         b5.fits         b8.fits
b11.fits        b32.fits        b6.fits         b9.fits

1) The name of the standard star (***note this must match the name of the relevant IRAF calibration file, e.g. feige34.dat, bd284211.dat, etc.***)

--> object = "feige34"

2) The file name of the standard star

--> image = ['b32.fits']

3) The file name of the arc(s)

--> arcs = ['b1.fits']

4) The file name of the flats.

--> flats = ['b2.fits', 'b3.fits', 'b4.fits', 'b5.fits', 'b6.fits', 'b7.fits', 'b8.fits', 'b9.fits', 'b10.fits', 'b11.fits']

5) The trim regions for both of the blue amplifiers.  Note the x values here probably should change from run to run, but the y values might depending on what part of the chip you read out.  Make sure to trim off any part of the CCD that isn't exposed to the slit, otherwise it will throw off the cosmic ray rejection.

--> trimsec1='[1:1024,31:300]'
--> trimsec2='[1025:2048,31:300]'

6) The path to the flux calibration file (the trailing backslash is important!):

--> caldir = "/Users/cenko/iraf/standards/"

The just run the command:

--> kast_redux.blue_standard(image, arcs, flats, object=object, trimsec1=trimsec1, trimsec2=trimsec2, caldir=caldir)

You will have to interact with the script at several points.

First, you have to extract the 1d spectrum of the standard star (using the IRAF task "apall").  You'll be
asked a series of questions that you can just select the default to (by hitting return):

Find apertures for jb32? ('yes'): 
Number of apertures to be found automatically (1): 
Resize apertures for jb32? ('yes'): 
Edit apertures for jb32? ('yes'): 

You should then see a column plot of the standard star.  The aperture (marked 1) should be well-defined (unlike in the science images, where you might be competing with galaxy light or other objects on the slit).  You may have to adjust the background regions a bit.  To do so, type 'b' to enter background mode.  'z' deletes the previously defined regions.  's' defines new background regions.  'f' redoes the plotted background fit.  When you are happy with the background, hit 'q'.  Hit 'q' again when you are happy with the aperture and background.

You are then asked if you want to trace the aperture.  Hit enter to select yes.  Next you are asked if you want to fit the traced positions.  Hit enter again to select yes.  One more time hit enter to do the fit interactively.  The fit should do a reasonable job recreating the trace, but you can change the order of the polynomial by typing 'order N' where 'N' is the new order you would like.  'f' redoes the fit.  Type 'q' when you are satisfied.

Hit enter a few more times until you see a plot of the extracted spectrum, then hit 'q' to exit the aperture extraction.

The most time consuming step is to identify the arc lines and come up with a wavelength solution.  You should now see a plot of the extract arc.  You can zoom in part of the spectrum by typing 'w' and then 'j' (left) / 'k' (right) / 't' (top) / 'b' (bottom) using your cursor as reference.  Typing 'w' then 'a' will show you the entire spectrum.  Type 'm' to mark a line and then you can enter its wavelength.  When you have marked a few lines, type 'f' to see how the fit looks.  I've provided the blue (and red) wavelength solutions from my last run if you want to use them as a guide.   A 4th order legendre polynomial is usually good on the blue side.  Typing 'q' will exit fitting mode to show you the spectrum once again. Once you are happy with a final fit with all the major lines identified, type 'q' and then hit enter to write the solution to the database.

Next you will be shown a plot of the standard star with the wavelength correction applied.  You should see a strong continuum with a handful of narrow absorption lines.  We want to remove these lines when doing the flux calibration.  To do so, zoom in a line with the 'w' then 'j' and 'w' then 'k' combination.  Move your cursor to where the absorption feature begins and type 'x', then to were it ends and type 'x' again.  You should see a line drawn between these two points.  Type 'w' then 'a' to see the entire spectrum again with this feature removed. 

Repeat this procedure for all the strong narrow features you see.  When you are done, type 'i' to save this spectrum as a new file and type 'temp1' then enter to name it temp1.fits.

Now we have to define the regions where we want fit for our sensitivity function.  You should see a prompt asking you "Edit bandpasses?".  Hit enter to select the default ('yes'), where a plot of our smoothed standard star will come up. The flux level should be approximately 1 everywhere except at the very ends and near the narrow absorption features we removed earlier.  Zoom in to those regions ('w' / 'jktb') and remove the boxes there by typing 'd' when your cursor is on top of one.  Repeat this for both edges of the chip and all the absorption features, then type 'q'.

Finally, we have to fit for the sensitivity function.  You should be asked "fit aperture 1 interactivey?"  Hit enter to select 'yes'.  The default 3rd order legendre polynomial should provide a reasonable fit, but you can change the order by typing 'order N' and then 'g' to refit and replot.  When you are happy, type 'q' to finish.

Reducing the red side standard is almost identical, with added step to remove the telluric atmospheric absorption features.  Here's a quick run-down.

--> pwd
/scr/obs/lick/20100315/redcalibs
--> ls
r1.fits r2.fits r4.fits r5.fits r6.fits r7.fits r8.fits
--> object = "hd84937"
--> image = ["r4.fits"]
--> arcs = ["r1.fits", "r2.fits"]
--> flats = ["r6.fits", "r7.fits", "r8.fits"]
--> trimsec= "[1:1200,51:210]"
--> caldir = "onedstds$redcal/"
--> kast_redux.red_standard(image, arcs, flats, object=object, trimsec=trimsec, caldir=caldir)

Extracted the 1d spectrum of the standard as before.

Solve for the wavelength solution as before.

Remove the absorption features from the resulting wavelength calibrated spectrum (***make sure to get the telluric features at 7600 and 6900 A***), saving the result as 'temp1'.

Next, you should see a flat spectrum with several deep absorption features.  These are the things you just removed previously.  To create the telluric file, we want to remove all the features in this spectrum except for the ones at 6900 and 7600 (i.e. the spectrum should be one everywhere except for those two features).  Use the 'x'-'x' commands to remove anything that is not due to atmospheric absorption, and save the resulting spectrum as 'telluric'.

Remove the bad regions from the standard file used to calculate the sensitivity function, and fit the sensitivity function to a low-order polynomial (again a 3rd order Legendre function is usually sufficient).

Once you've solved for the wavelength solution and sensitivity function, the vast majority of the hard work is over.  Now you just need to apply these to the science images as they come in.

To reduce science images:

1) Create the appropriate directory structure

--> pwd
/scr/obs/lick/20100315
--> mkdir PTF10bjs
--> cd PTF10bjs
--> mkdir blue
--> mkdir red
--> mkdir combine

2) Copy the raw blue (science) and red (science, arcs) files to the appropriate directories

--> ls blue
b43.fits
--> ls red
r50.fits        r51.fits        r52.fits        r53.fits        r54.fits

3) Run the main script

--> pwd
/scr/obs/lick/20100315/PTF10bjs
--> ls
blue    combine red
--> object = "PTF10bjs"
--> blueimage = ["b43.fits"]
--> bluepath = "../bluecalibs"
--> bluestd = "feige34"
--> redimage = ["r50.fits"]
--> redflats = ["r52.fits", "r53.fits", "r54.fits"]
--> redpath = "../redcalibs"
--> redstd = "hd84937"
--> bluetrim1 = '[1:1024,31:300]'  # Make sure these are the same as before!
--> bluetrim2 = '[1025:2048,31:300]'
--> redtrim = '[1:1200,51:210]'
--> kast_redux.do_all_science(object, blueimage, bluepath, bluestd, redimage, redflats, redpath, redstd, btrimsec1=bluetrim1, btrimsec2=bluetrim2, rtrimsec=redtrim)

You will be asked to extract the 1d spectrum on both the red and blue sides (i.e., identify the trace, fit the background, fit the trace, etc.), but that should be about the only interaction required.

The resulting combined spectrum will be stored in the 'combine' directory and called <object>.fits, i.e. "combine/PTF10bjs.fits".  To display this in IRAF, type "splot combine/PTF10bjs".






